using System.IO;
using System.Text;
using UnityEditor;
using UnityEditor.AddressableAssets;
using UnityEngine;

namespace FreedLOW.FireAtTargets.Code.Editor
{
    public class AddressablesKeyGenerator
    {
        private const string OutputPath = "Assets//FireAtTargets/Code/Generated/AddressableKeys.cs";

        [MenuItem("Tools/FreedLOW/Addressables/Generate Asset Keys")]
        public static void Generate()
        {
            var settings = AddressableAssetSettingsDefaultObject.Settings;
            if (!settings)
            {
                Debug.LogError("Addressable Asset Settings not found");
                return;
            }
            
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// This file is auto-generated by AddressablesKeyGenerator.cs");
            sb.AppendLine("public static class AddressableKeys");
            sb.AppendLine("{");
            
            foreach (var group in settings.groups)
            {
                if (!group || group.entries.Count == 0 || group.ReadOnly)
                    continue;
                
                string safeGroupName = MakeSafeIdentifier(group.Name);
                sb.AppendLine($"\tpublic static class {safeGroupName}");
                sb.AppendLine("\t{");

                foreach (var entry in group.entries)
                {
                    string key = entry.address;
                    string constName = MakeSafeIdentifier(Path.GetFileNameWithoutExtension(key));
                    sb.AppendLine($"\t\tpublic const string {constName} = \"{key}\";");
                }
                
                sb.AppendLine("\t}");
                sb.AppendLine("\t");
            }
            
            sb.AppendLine("}");

            Directory.CreateDirectory(Path.GetDirectoryName(OutputPath));
            File.WriteAllText(OutputPath, sb.ToString());
            AssetDatabase.Refresh();
            Debug.Log($"Addressable keys generated at {OutputPath}.");
        }

        private static string MakeSafeIdentifier(string groupName)
        {
            groupName = groupName.Replace(" ", "_").Replace("-", "_");
            return char.IsLetter(groupName[0]) ? groupName : "_" + groupName;
        }
    }
}